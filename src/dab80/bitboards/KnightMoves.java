package dab80.bitboards;

public class KnightMoves {
    static long[] knightMoves = new long[] {0x20400L, 0x50800L, 0xa1100L, 0x142200L, 0x284400L, 0x508800L, 0xa01000L, 0x402000L,
            0x2040004L, 0x5080008L, 0xa110011L, 0x14220022L, 0x28440044L, 0x50880088L, 0xa0100010L, 0x40200020L,
            0x204000402L, 0x508000805L, 0xa1100110aL, 0x1422002214L, 0x2844004428L, 0x5088008850L, 0xa0100010a0L, 0x4020002040L,
            0x20400040200L, 0x50800080500L, 0xa1100110a00L, 0x142200221400L, 0x284400442800L, 0x508800885000L, 0xa0100010a000L, 0x402000204000L,
            0x2040004020000L, 0x5080008050000L, 0xa1100110a0000L, 0x14220022140000L, 0x28440044280000L, 0x50880088500000L, 0xa0100010a00000L,
            0x40200020400000L, 0x204000402000000L, 0x508000805000000L, 0xa1100110a000000L, 0x1422002214000000L, 0x2844004428000000L,
            0x5088008850000000L, 0xa0100010a0000000L, 0x4020002040000000L, 0x400040200000000L, 0x800080500000000L, 0x1100110a00000000L,
            0x2200221400000000L, 0x4400442800000000L, 0x8800885000000000L, 0x100010a000000000L, 0x2000204000000000L, 0x4020000000000L,
            0x8050000000000L, 0x110a0000000000L, 0x22140000000000L, 0x44280000000000L, 0x88500000000000L, 0x10a00000000000L, 0x20400000000000L};

    static long[] kingMoves = new long[] {0x302L, 0x705L, 0xe0aL, 0x1c14L, 0x3828L, 0x7050L, 0xe0a0L, 0xc040L, 0x30203L, 0x70507L, 0xe0a0eL,
            0x1c141cL, 0x382838L, 0x705070L, 0xe0a0e0L, 0xc040c0L, 0x3020300L, 0x7050700L, 0xe0a0e00L, 0x1c141c00L, 0x38283800L, 0x70507000L,
            0xe0a0e000L, 0xc040c000L, 0x302030000L, 0x705070000L, 0xe0a0e0000L, 0x1c141c0000L, 0x3828380000L, 0x7050700000L, 0xe0a0e00000L,
            0xc040c00000L, 0x30203000000L, 0x70507000000L, 0xe0a0e000000L, 0x1c141c000000L, 0x382838000000L, 0x705070000000L, 0xe0a0e0000000L,
            0xc040c0000000L, 0x3020300000000L, 0x7050700000000L, 0xe0a0e00000000L, 0x1c141c00000000L, 0x38283800000000L, 0x70507000000000L,
            0xe0a0e000000000L, 0xc040c000000000L, 0x302030000000000L, 0x705070000000000L, 0xe0a0e0000000000L, 0x1c141c0000000000L,
            0x3828380000000000L, 0x7050700000000000L, 0xe0a0e00000000000L, 0xc040c00000000000L, 0x203000000000000L, 0x507000000000000L,
            0xa0e000000000000L, 0x141c000000000000L, 0x2838000000000000L, 0x5070000000000000L, 0xa0e0000000000000L, 0x40c0000000000000L};

    // Every 6-bit sub-sequence unique to allow indexed base 2 log. Generation:
/*  zeros = 0, ones = 0
    mapping = {}
    for i in range(64):
        if i % 2 == 0:
            mapping[zeros++] = i
        else:
            mapping[32+ones++] = i
     cycles = []
     for i in range(64):
        while i not in cycles:
            cycles.add(i)
            i = mapping[i]
     key = .join([0 if i < 32 else 1 for i in cycles])   */
    static long debrujin = 0x218a392cd3d5dbfL;

    // maps unique value between 0 and 63 from debrujin multiply-and-shift to original index
    static int[] reverseMap = new int[] {0, 1, 2, 7, 3, 13, 8, 19, 4, 25, 14, 28, 9, 34, 20, 40, 5, 17, 26, 38, 15, 46,
            29, 48, 10, 31, 35, 54, 21, 50, 41, 57, 63, 6, 12, 18, 24, 27, 33, 39, 16, 37, 45, 47, 30, 53, 49, 56, 62,
            11, 23, 32, 36, 44, 52, 55, 61, 22, 43, 51, 60, 42, 59, 58};

    public static int LSBindex(long l){
        l = l ^ (l-1); // LSB and all bits below get set
        return reverseMap[(int)((l*debrujin) >> 58)];
    }
}
